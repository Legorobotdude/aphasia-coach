---
description: Onboarding
globs: 
alwaysApply: false
---
# Onboarding Flow (`/onboarding`)

This rule describes the multi-step voice onboarding wizard for new users, located under [app/onboarding](mdc:app/onboarding).

## Overview

The onboarding wizard guides users through a series of questions ([app/onboarding/questions.ts](mdc:app/onboarding/questions.ts)), records their spoken answers, transcribes them, and allows confirmation. The collected information is used to personalize their experience, primarily by providing context for initial prompt generation.

## Key Components

*   **Entry Point:** [app/onboarding/page.tsx](mdc:app/onboarding/page.tsx)
    *   Renders the main `<OnboardingWizard />` component.
*   **Core Logic:** [app/onboarding/components/Wizard.tsx](mdc:app/onboarding/components/Wizard.tsx)
    *   Manages the multi-step flow (questions defined in [app/onboarding/questions.ts](mdc:app/onboarding/questions.ts)).
    *   Uses `useRecorder` from [lib/audio.ts](mdc:lib/audio.ts) for audio capture.
    *   Calls `/api/openai/transcribe` to get transcriptions of user's answers.
    *   Saves each confirmed answer (question, transcript) to Firestore under `users/{uid}/onboardingAnswers/{questionLabel}`.
    *   Includes basic IndexedDB caching for answers during the flow.
*   **Final Step - Prompt Initialization:**
    *   Upon completion of the last question, the `handleContinue` function in `Wizard.tsx` makes a `POST` request to the `/api/user/initialize-prompts` endpoint.
    *   This triggers the [app/api/user/initialize-prompts/route.ts](mdc:app/api/user/initialize-prompts/route.ts) handler, which in turn calls `generatePromptDocs(userId)` from [lib/openai.ts](mdc:lib/openai.ts).
    *   `generatePromptDocs` uses the collected onboarding answers (from `users/{uid}/onboardingAnswers`) as context to generate an initial set of personalized practice prompts via OpenAI.
    *   These initial prompts are saved to the `users/{uid}/generatedPrompts` Firestore collection (see [prompt-system.mdc](mdc:.cursor/rules/prompt-system.mdc) for details on this collection).
    *   After successful prompt initialization, the user's main document in `users/{uid}` is updated with `onboardComplete: true` and `promptsInitializedAt: serverTimestamp()`.
    *   The user is then redirected to their first voice session (`/session`).

## Data Flow & Persistence

1.  User answers questions verbally for each step.
2.  Audio is recorded, sent to `/api/openai/transcribe`.
3.  Transcript is displayed for confirmation/editing.
4.  Confirmed answer (question text, transcript text) is saved to `users/{uid}/onboardingAnswers/{questionLabel}` in Firestore.
5.  **On Final Step Completion:**
    *   A `POST` request is made to `/api/user/initialize-prompts`.
    *   The API handler calls `generatePromptDocs(userId)`.
    *   `generatePromptDocs` fetches context from `users/{uid}/onboardingAnswers`.
    *   New prompts are generated by OpenAI and saved to `users/{uid}/generatedPrompts`.
    *   User's main profile (`users/{uid}`) is marked as `onboardComplete: true`.

## Firestore Dependencies

*   Reads/Writes to `users/{uid}/onboardingAnswers/{questionLabel}`.
*   Triggers creation of documents in `users/{uid}/generatedPrompts` via the `initialize-prompts` API call.
*   Updates the main `users/{uid}` document upon completion.

## Important Considerations

*   **Personalization Source:** The data collected in `onboardingAnswers` is the primary source for personalizing the initial set of practice prompts for the user.
*   **Prompt System Integration:** The final step of onboarding is crucial for bootstrapping the user's experience with the [prompt-system.mdc](mdc:.cursor/rules/prompt-system.mdc) by populating their initial `generatedPrompts`.
