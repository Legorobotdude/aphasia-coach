---
description: Voice Session
globs: 
alwaysApply: false
---
# Voice Session Feature (`/session`)

This rule describes the core voice interaction feature of the Aphasia Coach app, located under [app/session](mdc:app/session).

## Overview

The voice session presents users with prompts, records their spoken responses, gets them transcribed and scored via OpenAI APIs, provides feedback, and logs results to Firestore. It now supports both regular multi-prompt sessions and a "focus mode" for practicing specific prompts.

## Key Components

*   **Entry Point:** [app/session/page.tsx](mdc:app/session/page.tsx)
    *   Handles authentication checks.
    *   Detects URL parameters `mode=focus` and `promptId` to activate focus mode.
    *   Renders the main `<VoiceSession />` component, passing `focusModePromptId` if applicable.
*   **Core Logic:** [app/session/components/VoiceSession.tsx](mdc:app/session/components/VoiceSession.tsx)
    *   Manages the session lifecycle using a `useReducer` state machine.
    *   **Prompt Fetching:**
        *   **Regular Mode:** Uses SWR to fetch a batch of prompts from `/api/openai/prompts`. This API now utilizes a caching layer, serving prompts from `users/{uid}/generatedPrompts` and regenerating/caching new ones if needed (see [prompt-system.mdc](mdc:.cursor/rules/prompt-system.mdc)).
        *   **Focus Mode:** If `focusModePromptId` is provided, it bypasses the SWR call and directly fetches the single specified prompt from `users/{uid}/generatedPrompts/{focusModePromptId}` in Firestore.
    *   Integrates the `useRecorder` hook from [lib/audio.ts](mdc:lib/audio.ts) for audio capture.
    *   Handles Text-to-Speech (TTS) using `window.speechSynthesis`.
    *   Orchestrates API calls to `/api/openai/transcribe` and `/api/openai/score`.
    *   Calculates recording latency.
    *   Persists session summary and individual utterance data to Firestore.
    *   **Updates Master Prompt Performance:** After an utterance is scored, it updates the corresponding prompt document in `users/{uid}/generatedPrompts` with the `lastScore`, `lastUsedAt` timestamp, and increments `timesUsed`.
    *   Renders child UI components based on the current state.
*   **Audio Hook:** [lib/audio.ts](mdc:lib/audio.ts)
    *   Provides `useRecorder` (details unchanged from previous version of this rule).
*   **UI Components:** Located in [app/session/components](mdc:app/session/components) (details largely unchanged).

## Data Flow & Persistence

1.  **Prompt Acquisition:**
    *   **Regular Session:** Prompts are fetched via SWR from `/api/openai/prompts`. This API interacts with the `users/{uid}/generatedPrompts` cache and OpenAI for generation if needed.
    *   **Focus Mode Session:** A single prompt is fetched directly from `users/{uid}/generatedPrompts/{promptId}`.
2.  **Initial Session Document:** When prompts load (either batch or single), an initial session document is created at `sessions/{sessionId}` containing `{ ownerUid, startedAt, promptCount }`.
3.  **Utterance Processing:** After each prompt response is recorded and processed:
    *   Audio blob sent to `/api/openai/transcribe`.
    *   Transcript + Prompt text sent to `/api/openai/score`.
    *   Resulting utterance data (prompt text, `promptId` from `generatedPrompts`, response, score, feedback, latency, ownerUid, sessionId) is written as a new document to the subcollection: `sessions/{sessionId}/utterances/{utteranceId}`.
    *   **Crucially**, the master prompt document in `users/{uid}/generatedPrompts/{promptId}` is updated with `lastScore`, `lastUsedAt`, and `timesUsed` is incremented.
4.  **Session Summary:** After the last prompt (or the single prompt in focus mode), a session summary (accuracy, avg latency, duration) is merged into the main session document at `sessions/{sessionId}`.

## Firestore Data Structure Details

This section details the specific fields stored in Firestore related to voice sessions.

**1. Path Structure**

*   **Session Documents:** `sessions/{sessionId}`
*   **Utterance Documents:** `sessions/{sessionId}/utterances/{utteranceId}`
*   **User-Specific Generated Prompts:** `users/{uid}/generatedPrompts/{promptDocId}` (New)

**2. Session Document Fields (`sessions/{sessionId}`)**

*   (Fields largely unchanged: `ownerUid`, `startedAt`, `promptCount`, `completedAt`, `durationSec`, `accuracy`, `latencyMs`, `completedCount`)

**3. Utterance Document Fields (`sessions/{sessionId}/utterances/{utteranceId}`)**

*   `prompt` (string): The prompt text.
*   `promptId` (string): The ID of the master prompt document from `users/{uid}/generatedPrompts`.
*   `response` (string): The transcribed user response.
*   `score` (number | null): The score (0-1) from OpenAI.
*   `feedback` (string): Textual feedback from OpenAI.
*   `latencyMs` (number | null): Calculated response latency.
*   `createdAt` (Timestamp): Server timestamp.
*   `ownerUid` (string): Firebase Auth UID of the user.
*   `sessionId` (string): ID of the parent session document.

**4. User-Specific Generated Prompt Fields (`users/{uid}/generatedPrompts/{promptDocId}`)** (New)

*   `text` (string): The prompt text.
*   `createdAt` (Timestamp): When the prompt was generated.
*   `source` (string): e.g., "onboarding-initial", "api-cached".
*   `lastScore` (number | null): Last score achieved on this prompt.
*   `timesUsed` (number): Number of times this prompt has been fetched for/used in a session.
*   `lastUsedAt` (Timestamp | null): Last time this prompt was fetched for/used in a session.
*   `ownerUid` (string): UID of the user.

## Important Considerations

*   **Prompt System Interaction:** The voice session heavily relies on the new prompt system for acquiring and updating prompts. Refer to [prompt-system.mdc](mdc:.cursor/rules/prompt-system.mdc) for full details on the prompt lifecycle.
*   **Focus Mode:** The new focus mode allows targeted practice. Ensure the `/session` page correctly handles the `mode=focus&promptId=` parameters.
*   **Firestore Indexes:** Efficient querying of `generatedPrompts` (for fetching by `/api/openai/prompts`) and `sessions`/`utterances` relies on indexes in [firestore.indexes.json](mdc:firestore.indexes.json).
